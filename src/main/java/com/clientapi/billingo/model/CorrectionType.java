/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.clientapi.billingo.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets CorrectionType
 */
@JsonAdapter(CorrectionType.Adapter.class)
public enum CorrectionType {
  
  ADVANCE("advance"),
  
  CANCELED("canceled"),
  
  CANCELLATION("cancellation"),
  
  CERT_OF_COMPLETION("cert_of_completion"),
  
  D_CERT_OF_COMPLETION("d_cert_of_completion"),
  
  DOSSIER("dossier"),
  
  DRAFT("draft"),
  
  DRAFT_OFFER("draft_offer"),
  
  DRAFT_ORDER_FORM("draft_order_form"),
  
  DRAFT_WAYBILL("draft_waybill"),
  
  INVOICE("invoice"),
  
  MODIFICATION("modification"),
  
  MODIFIED("modified"),
  
  OFFER("offer"),
  
  ORDER_FORM("order_form"),
  
  PROFORMA("proforma"),
  
  RECEIPT("receipt"),
  
  RECEIPT_CANCELLATION("receipt_cancellation"),
  
  WAYBILL("waybill");

  private String value;

  CorrectionType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CorrectionType fromValue(String value) {
    for (CorrectionType b : CorrectionType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<CorrectionType> {
    @Override
    public void write(final JsonWriter jsonWriter, final CorrectionType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CorrectionType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return CorrectionType.fromValue(value);
    }
  }
}


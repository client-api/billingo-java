/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.clientapi.billingo.model;

import java.util.Objects;
import com.clientapi.billingo.model.Address;
import com.clientapi.billingo.model.PartnerCustomBillingSettings;
import com.clientapi.billingo.model.PartnerTaxType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.clientapi.billingo.invoker.JSON;

/**
 * Partner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-15T09:59:06.459642900+02:00[Europe/Budapest]")
public class Partner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<String> emails;

  public static final String SERIALIZED_NAME_TAXCODE = "taxcode";
  @SerializedName(SERIALIZED_NAME_TAXCODE)
  private String taxcode;

  public static final String SERIALIZED_NAME_IBAN = "iban";
  @SerializedName(SERIALIZED_NAME_IBAN)
  private String iban;

  public static final String SERIALIZED_NAME_SWIFT = "swift";
  @SerializedName(SERIALIZED_NAME_SWIFT)
  private String swift;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_GENERAL_LEDGER_NUMBER = "general_ledger_number";
  @SerializedName(SERIALIZED_NAME_GENERAL_LEDGER_NUMBER)
  private String generalLedgerNumber;

  public static final String SERIALIZED_NAME_TAX_TYPE = "tax_type";
  @SerializedName(SERIALIZED_NAME_TAX_TYPE)
  private PartnerTaxType taxType;

  public static final String SERIALIZED_NAME_CUSTOM_BILLING_SETTINGS = "custom_billing_settings";
  @SerializedName(SERIALIZED_NAME_CUSTOM_BILLING_SETTINGS)
  private PartnerCustomBillingSettings customBillingSettings;

  public static final String SERIALIZED_NAME_GROUP_MEMBER_TAX_NUMBER = "group_member_tax_number";
  @SerializedName(SERIALIZED_NAME_GROUP_MEMBER_TAX_NUMBER)
  private String groupMemberTaxNumber;

  public Partner() {
  }

  
  public Partner(
     Integer id
  ) {
    this();
    this.id = id;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }




  public Partner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Partner address(Address address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }


  public void setAddress(Address address) {
    this.address = address;
  }


  public Partner emails(List<String> emails) {
    
    this.emails = emails;
    return this;
  }

  public Partner addEmailsItem(String emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

   /**
   * Get emails
   * @return emails
  **/
  @javax.annotation.Nullable
  public List<String> getEmails() {
    return emails;
  }


  public void setEmails(List<String> emails) {
    this.emails = emails;
  }


  public Partner taxcode(String taxcode) {
    
    this.taxcode = taxcode;
    return this;
  }

   /**
   * Get taxcode
   * @return taxcode
  **/
  @javax.annotation.Nullable
  public String getTaxcode() {
    return taxcode;
  }


  public void setTaxcode(String taxcode) {
    this.taxcode = taxcode;
  }


  public Partner iban(String iban) {
    
    this.iban = iban;
    return this;
  }

   /**
   * Get iban
   * @return iban
  **/
  @javax.annotation.Nullable
  public String getIban() {
    return iban;
  }


  public void setIban(String iban) {
    this.iban = iban;
  }


  public Partner swift(String swift) {
    
    this.swift = swift;
    return this;
  }

   /**
   * Get swift
   * @return swift
  **/
  @javax.annotation.Nullable
  public String getSwift() {
    return swift;
  }


  public void setSwift(String swift) {
    this.swift = swift;
  }


  public Partner accountNumber(String accountNumber) {
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Get accountNumber
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public Partner phone(String phone) {
    
    this.phone = phone;
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    this.phone = phone;
  }


  public Partner generalLedgerNumber(String generalLedgerNumber) {
    
    this.generalLedgerNumber = generalLedgerNumber;
    return this;
  }

   /**
   * Get generalLedgerNumber
   * @return generalLedgerNumber
  **/
  @javax.annotation.Nullable
  public String getGeneralLedgerNumber() {
    return generalLedgerNumber;
  }


  public void setGeneralLedgerNumber(String generalLedgerNumber) {
    this.generalLedgerNumber = generalLedgerNumber;
  }


  public Partner taxType(PartnerTaxType taxType) {
    
    this.taxType = taxType;
    return this;
  }

   /**
   * Get taxType
   * @return taxType
  **/
  @javax.annotation.Nullable
  public PartnerTaxType getTaxType() {
    return taxType;
  }


  public void setTaxType(PartnerTaxType taxType) {
    this.taxType = taxType;
  }


  public Partner customBillingSettings(PartnerCustomBillingSettings customBillingSettings) {
    
    this.customBillingSettings = customBillingSettings;
    return this;
  }

   /**
   * Get customBillingSettings
   * @return customBillingSettings
  **/
  @javax.annotation.Nullable
  public PartnerCustomBillingSettings getCustomBillingSettings() {
    return customBillingSettings;
  }


  public void setCustomBillingSettings(PartnerCustomBillingSettings customBillingSettings) {
    this.customBillingSettings = customBillingSettings;
  }


  public Partner groupMemberTaxNumber(String groupMemberTaxNumber) {
    
    this.groupMemberTaxNumber = groupMemberTaxNumber;
    return this;
  }

   /**
   * The tax number of group member. Send tax number for update. Send empty string for delete. Ignored if omitted.
   * @return groupMemberTaxNumber
  **/
  @javax.annotation.Nullable
  public String getGroupMemberTaxNumber() {
    return groupMemberTaxNumber;
  }


  public void setGroupMemberTaxNumber(String groupMemberTaxNumber) {
    this.groupMemberTaxNumber = groupMemberTaxNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Partner partner = (Partner) o;
    return Objects.equals(this.id, partner.id) &&
        Objects.equals(this.name, partner.name) &&
        Objects.equals(this.address, partner.address) &&
        Objects.equals(this.emails, partner.emails) &&
        Objects.equals(this.taxcode, partner.taxcode) &&
        Objects.equals(this.iban, partner.iban) &&
        Objects.equals(this.swift, partner.swift) &&
        Objects.equals(this.accountNumber, partner.accountNumber) &&
        Objects.equals(this.phone, partner.phone) &&
        Objects.equals(this.generalLedgerNumber, partner.generalLedgerNumber) &&
        Objects.equals(this.taxType, partner.taxType) &&
        Objects.equals(this.customBillingSettings, partner.customBillingSettings) &&
        Objects.equals(this.groupMemberTaxNumber, partner.groupMemberTaxNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, address, emails, taxcode, iban, swift, accountNumber, phone, generalLedgerNumber, taxType, customBillingSettings, groupMemberTaxNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Partner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    taxcode: ").append(toIndentedString(taxcode)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    swift: ").append(toIndentedString(swift)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    generalLedgerNumber: ").append(toIndentedString(generalLedgerNumber)).append("\n");
    sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
    sb.append("    customBillingSettings: ").append(toIndentedString(customBillingSettings)).append("\n");
    sb.append("    groupMemberTaxNumber: ").append(toIndentedString(groupMemberTaxNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("address");
    openapiFields.add("emails");
    openapiFields.add("taxcode");
    openapiFields.add("iban");
    openapiFields.add("swift");
    openapiFields.add("account_number");
    openapiFields.add("phone");
    openapiFields.add("general_ledger_number");
    openapiFields.add("tax_type");
    openapiFields.add("custom_billing_settings");
    openapiFields.add("group_member_tax_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Partner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Partner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Partner is not found in the empty JSON string", Partner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Partner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Partner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonNull() && !jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }
      if ((jsonObj.get("taxcode") != null && !jsonObj.get("taxcode").isJsonNull()) && !jsonObj.get("taxcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxcode").toString()));
      }
      if ((jsonObj.get("iban") != null && !jsonObj.get("iban").isJsonNull()) && !jsonObj.get("iban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iban").toString()));
      }
      if ((jsonObj.get("swift") != null && !jsonObj.get("swift").isJsonNull()) && !jsonObj.get("swift").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `swift` to be a primitive type in the JSON string but got `%s`", jsonObj.get("swift").toString()));
      }
      if ((jsonObj.get("account_number") != null && !jsonObj.get("account_number").isJsonNull()) && !jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("general_ledger_number") != null && !jsonObj.get("general_ledger_number").isJsonNull()) && !jsonObj.get("general_ledger_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `general_ledger_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("general_ledger_number").toString()));
      }
      // validate the optional field `custom_billing_settings`
      if (jsonObj.get("custom_billing_settings") != null && !jsonObj.get("custom_billing_settings").isJsonNull()) {
        PartnerCustomBillingSettings.validateJsonElement(jsonObj.get("custom_billing_settings"));
      }
      if ((jsonObj.get("group_member_tax_number") != null && !jsonObj.get("group_member_tax_number").isJsonNull()) && !jsonObj.get("group_member_tax_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_member_tax_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_member_tax_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Partner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Partner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Partner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Partner.class));

       return (TypeAdapter<T>) new TypeAdapter<Partner>() {
           @Override
           public void write(JsonWriter out, Partner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Partner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Partner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Partner
  * @throws IOException if the JSON string is invalid with respect to Partner
  */
  public static Partner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Partner.class);
  }

 /**
  * Convert an instance of Partner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


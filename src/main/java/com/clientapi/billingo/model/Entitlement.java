/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.clientapi.billingo.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 *  * &#x60;AAM&#x60; - Alanyi adómentesség * &#x60;ANTIQUES&#x60; - Különbözet szerinti szabályozás - gyűjteménydarabok és régiségek - * &#x60;ARTWORK&#x60; - Különbözet szerinti szabályozás - műalkotások - * &#x60;ATK&#x60; - Áfa tv. tárgyi hatályán kívüli ügylet * &#x60;EAM&#x60; - Áfamentes termékexport, azzal egy tekintet alá eső értékesítések, nemzetközi közlekedéshez kapcsolódó áfamentes ügyletek (Áfa tv. 98-109. §) * &#x60;EUE&#x60; - EU más tagállamában áfaköteles (áfa fizetésére az értékesítő köteles) * &#x60;EUFAD37&#x60; - Áfa tv. 37. § (1) bekezdése alapján a szolgáltatás teljesítése helye az EU más tagállama (áfa fizetésére a vevő köteles) * &#x60;EUFADE&#x60; - Áfa tv. egyéb rendelkezése szerint a teljesítés helye EU más tagállama (áfa fizetésére a vevő kötelezett) * &#x60;HO&#x60; - Áfa tv. szerint EU-n kívül teljesített ügylet * &#x60;KBAET&#x60; - Más tagállamba irányuló áfamentes termékértékesítés (Áfa tv. 89. §) * &#x60;NAM_1&#x60; - Áfamentes közvetítői tevékenység (Áfa tv. 110. §) * &#x60;NAM_2&#x60; - Termékek nemzetközi forgalmához kapcsolódó áfamentes ügylet (Áfa tv. 111-118. §) * &#x60;SECOND_HAND&#x60; - Különbözet szerinti szabályozás - használt cikkek - * &#x60;TAM&#x60; - Tevékenység közérdekű jellegére vagy egyéb sajátos jellegére tekintettel áfamentes (Áfa tv. 85-87.§) * &#x60;TRAVEL_AGENCY&#x60; - Különbözet szerinti szabályozás - utazási irodák -
 */
@JsonAdapter(Entitlement.Adapter.class)
public enum Entitlement {
  
  AAM("AAM"),
  
  ANTIQUES("ANTIQUES"),
  
  ARTWORK("ARTWORK"),
  
  ATK("ATK"),
  
  EAM("EAM"),
  
  EUE("EUE"),
  
  EUFAD37("EUFAD37"),
  
  EUFADE("EUFADE"),
  
  HO("HO"),
  
  KBAET("KBAET"),
  
  NAM_1("NAM_1"),
  
  NAM_2("NAM_2"),
  
  SECOND_HAND("SECOND_HAND"),
  
  TAM("TAM"),
  
  TRAVEL_AGENCY("TRAVEL_AGENCY");

  private String value;

  Entitlement(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Entitlement fromValue(String value) {
    for (Entitlement b : Entitlement.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Entitlement> {
    @Override
    public void write(final JsonWriter jsonWriter, final Entitlement enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Entitlement read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Entitlement.fromValue(value);
    }
  }
}


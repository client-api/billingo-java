/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.clientapi.billingo.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets Feature
 */
@JsonAdapter(Feature.Adapter.class)
public enum Feature {
  
  API_LIMIT_BASIC("api_limit_basic"),
  
  API_LIMIT_PRO("api_limit_pro"),
  
  API_LIMIT_STANDARD("api_limit_standard"),
  
  BANKSYNC_PLUS("banksync_plus"),
  
  CAMPAIGN_MANAGER_BASIC("campaign_manager_basic"),
  
  CAMPAIGN_MANAGER_STANDARD("campaign_manager_standard"),
  
  CEGINFO_ENTERPRISE("ceginfo_enterprise"),
  
  CEGINFO_PRO("ceginfo_pro"),
  
  CEGINFO_STANDARD("ceginfo_standard"),
  
  INNOVATOR("innovator"),
  
  LIMIT_INCREASE("limit_increase"),
  
  MASTER("master"),
  
  PARTNERMONITOR_BASIC("partnermonitor_basic"),
  
  PARTNERMONITOR_PRO("partnermonitor_pro"),
  
  PARTNERMONITOR_STANDARD("partnermonitor_standard"),
  
  SOFTPOS("softpos"),
  
  SUBSCRIPTION_BASIC("subscription_basic"),
  
  SUBSCRIPTION_PRO("subscription_pro"),
  
  SUBSCRIPTION_STANDARD("subscription_standard"),
  
  TENDERMONITOR_STANDARD("tendermonitor_standard"),
  
  TENDERMONITOR_VIP("tendermonitor_vip"),
  
  WHITELABEL("whitelabel");

  private String value;

  Feature(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Feature fromValue(String value) {
    for (Feature b : Feature.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Feature> {
    @Override
    public void write(final JsonWriter jsonWriter, final Feature enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Feature read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Feature.fromValue(value);
    }
  }
}


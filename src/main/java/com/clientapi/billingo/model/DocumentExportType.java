/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.clientapi.billingo.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets DocumentExportType
 */
@JsonAdapter(DocumentExportType.Adapter.class)
public enum DocumentExportType {
  
  ARMADA("armada"),
  
  AWS_BATCH("aws_batch"),
  
  EX_PANDA("ex_panda"),
  
  FORINTSOFT("forintsoft"),
  
  HESSYN("hessyn"),
  
  IMA("ima"),
  
  INFOTEKA("infoteka"),
  
  KULCS_KONYV("kulcs_konyv"),
  
  MAXITAX("maxitax"),
  
  NAGY_MACHINATOR("nagy_machinator"),
  
  NAV_PTGSZLAH("nav_ptgszlah"),
  
  NAV_STATUS("nav_status"),
  
  NAV_XML("nav_xml"),
  
  NAV_XML_ALIAS("nav_xml_alias"),
  
  NOVITAX("novitax"),
  
  PROFORMA_OUTSTANDING("proforma_outstanding"),
  
  RELAX("relax"),
  
  RLB("rlb"),
  
  RLB60("rlb60"),
  
  RLB_DOUBLE_ENTRY("rlb_double_entry"),
  
  SIMPLE_CSV("simple_csv"),
  
  SIMPLE_EXCEL("simple_excel"),
  
  SIMPLE_EXCEL_ITEMS("simple_excel_items"),
  
  TENSOFT("tensoft"),
  
  TENSOFT_29_DOT_65("tensoft_29_dot_65");

  private String value;

  DocumentExportType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static DocumentExportType fromValue(String value) {
    for (DocumentExportType b : DocumentExportType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<DocumentExportType> {
    @Override
    public void write(final JsonWriter jsonWriter, final DocumentExportType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public DocumentExportType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return DocumentExportType.fromValue(value);
    }
  }
}


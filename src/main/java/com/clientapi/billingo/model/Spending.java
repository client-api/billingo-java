/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.clientapi.billingo.model;

import java.util.Objects;
import com.clientapi.billingo.model.Category;
import com.clientapi.billingo.model.Currency;
import com.clientapi.billingo.model.SpendingPartner;
import com.clientapi.billingo.model.SpendingPaymentMethod;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.clientapi.billingo.invoker.JSON;

/**
 * Spending
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-15T09:59:06.459642900+02:00[Europe/Budapest]")
public class Spending {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organization_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private Integer organizationId;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Category category;

  public static final String SERIALIZED_NAME_PAID_AT = "paid_at";
  @SerializedName(SERIALIZED_NAME_PAID_AT)
  private LocalDate paidAt;

  public static final String SERIALIZED_NAME_FULFILLMENT_DATE = "fulfillment_date";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_DATE)
  private LocalDate fulfillmentDate;

  public static final String SERIALIZED_NAME_PARTNER = "partner";
  @SerializedName(SERIALIZED_NAME_PARTNER)
  private SpendingPartner partner;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoice_number";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_CONVERSION_RATE = "conversion_rate";
  @SerializedName(SERIALIZED_NAME_CONVERSION_RATE)
  private Float conversionRate;

  public static final String SERIALIZED_NAME_TOTAL_GROSS = "total_gross";
  @SerializedName(SERIALIZED_NAME_TOTAL_GROSS)
  private Float totalGross;

  public static final String SERIALIZED_NAME_TOTAL_GROSS_LOCAL = "total_gross_local";
  @SerializedName(SERIALIZED_NAME_TOTAL_GROSS_LOCAL)
  private Float totalGrossLocal;

  public static final String SERIALIZED_NAME_TOTAL_VAT_AMOUNT = "total_vat_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_VAT_AMOUNT)
  private Float totalVatAmount;

  public static final String SERIALIZED_NAME_TOTAL_VAT_AMOUNT_LOCAL = "total_vat_amount_local";
  @SerializedName(SERIALIZED_NAME_TOTAL_VAT_AMOUNT_LOCAL)
  private Float totalVatAmountLocal;

  public static final String SERIALIZED_NAME_INVOICE_DATE = "invoice_date";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATE)
  private LocalDate invoiceDate;

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private LocalDate dueDate;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "payment_method";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private SpendingPaymentMethod paymentMethod;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public Spending() {
  }

  public Spending id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public Spending organizationId(Integer organizationId) {
    
    this.organizationId = organizationId;
    return this;
  }

   /**
   * Get organizationId
   * @return organizationId
  **/
  @javax.annotation.Nullable
  public Integer getOrganizationId() {
    return organizationId;
  }


  public void setOrganizationId(Integer organizationId) {
    this.organizationId = organizationId;
  }


  public Spending category(Category category) {
    
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  public Category getCategory() {
    return category;
  }


  public void setCategory(Category category) {
    this.category = category;
  }


  public Spending paidAt(LocalDate paidAt) {
    
    this.paidAt = paidAt;
    return this;
  }

   /**
   * Get paidAt
   * @return paidAt
  **/
  @javax.annotation.Nullable
  public LocalDate getPaidAt() {
    return paidAt;
  }


  public void setPaidAt(LocalDate paidAt) {
    this.paidAt = paidAt;
  }


  public Spending fulfillmentDate(LocalDate fulfillmentDate) {
    
    this.fulfillmentDate = fulfillmentDate;
    return this;
  }

   /**
   * Get fulfillmentDate
   * @return fulfillmentDate
  **/
  @javax.annotation.Nullable
  public LocalDate getFulfillmentDate() {
    return fulfillmentDate;
  }


  public void setFulfillmentDate(LocalDate fulfillmentDate) {
    this.fulfillmentDate = fulfillmentDate;
  }


  public Spending partner(SpendingPartner partner) {
    
    this.partner = partner;
    return this;
  }

   /**
   * Get partner
   * @return partner
  **/
  @javax.annotation.Nullable
  public SpendingPartner getPartner() {
    return partner;
  }


  public void setPartner(SpendingPartner partner) {
    this.partner = partner;
  }


  public Spending invoiceNumber(String invoiceNumber) {
    
    this.invoiceNumber = invoiceNumber;
    return this;
  }

   /**
   * Get invoiceNumber
   * @return invoiceNumber
  **/
  @javax.annotation.Nullable
  public String getInvoiceNumber() {
    return invoiceNumber;
  }


  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }


  public Spending currency(Currency currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @javax.annotation.Nullable
  public Currency getCurrency() {
    return currency;
  }


  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public Spending conversionRate(Float conversionRate) {
    
    this.conversionRate = conversionRate;
    return this;
  }

   /**
   * Get conversionRate
   * @return conversionRate
  **/
  @javax.annotation.Nullable
  public Float getConversionRate() {
    return conversionRate;
  }


  public void setConversionRate(Float conversionRate) {
    this.conversionRate = conversionRate;
  }


  public Spending totalGross(Float totalGross) {
    
    this.totalGross = totalGross;
    return this;
  }

   /**
   * Get totalGross
   * @return totalGross
  **/
  @javax.annotation.Nullable
  public Float getTotalGross() {
    return totalGross;
  }


  public void setTotalGross(Float totalGross) {
    this.totalGross = totalGross;
  }


  public Spending totalGrossLocal(Float totalGrossLocal) {
    
    this.totalGrossLocal = totalGrossLocal;
    return this;
  }

   /**
   * Get totalGrossLocal
   * @return totalGrossLocal
  **/
  @javax.annotation.Nullable
  public Float getTotalGrossLocal() {
    return totalGrossLocal;
  }


  public void setTotalGrossLocal(Float totalGrossLocal) {
    this.totalGrossLocal = totalGrossLocal;
  }


  public Spending totalVatAmount(Float totalVatAmount) {
    
    this.totalVatAmount = totalVatAmount;
    return this;
  }

   /**
   * Get totalVatAmount
   * @return totalVatAmount
  **/
  @javax.annotation.Nullable
  public Float getTotalVatAmount() {
    return totalVatAmount;
  }


  public void setTotalVatAmount(Float totalVatAmount) {
    this.totalVatAmount = totalVatAmount;
  }


  public Spending totalVatAmountLocal(Float totalVatAmountLocal) {
    
    this.totalVatAmountLocal = totalVatAmountLocal;
    return this;
  }

   /**
   * Get totalVatAmountLocal
   * @return totalVatAmountLocal
  **/
  @javax.annotation.Nullable
  public Float getTotalVatAmountLocal() {
    return totalVatAmountLocal;
  }


  public void setTotalVatAmountLocal(Float totalVatAmountLocal) {
    this.totalVatAmountLocal = totalVatAmountLocal;
  }


  public Spending invoiceDate(LocalDate invoiceDate) {
    
    this.invoiceDate = invoiceDate;
    return this;
  }

   /**
   * Get invoiceDate
   * @return invoiceDate
  **/
  @javax.annotation.Nullable
  public LocalDate getInvoiceDate() {
    return invoiceDate;
  }


  public void setInvoiceDate(LocalDate invoiceDate) {
    this.invoiceDate = invoiceDate;
  }


  public Spending dueDate(LocalDate dueDate) {
    
    this.dueDate = dueDate;
    return this;
  }

   /**
   * Get dueDate
   * @return dueDate
  **/
  @javax.annotation.Nullable
  public LocalDate getDueDate() {
    return dueDate;
  }


  public void setDueDate(LocalDate dueDate) {
    this.dueDate = dueDate;
  }


  public Spending paymentMethod(SpendingPaymentMethod paymentMethod) {
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  public SpendingPaymentMethod getPaymentMethod() {
    return paymentMethod;
  }


  public void setPaymentMethod(SpendingPaymentMethod paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public Spending comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Spending spending = (Spending) o;
    return Objects.equals(this.id, spending.id) &&
        Objects.equals(this.organizationId, spending.organizationId) &&
        Objects.equals(this.category, spending.category) &&
        Objects.equals(this.paidAt, spending.paidAt) &&
        Objects.equals(this.fulfillmentDate, spending.fulfillmentDate) &&
        Objects.equals(this.partner, spending.partner) &&
        Objects.equals(this.invoiceNumber, spending.invoiceNumber) &&
        Objects.equals(this.currency, spending.currency) &&
        Objects.equals(this.conversionRate, spending.conversionRate) &&
        Objects.equals(this.totalGross, spending.totalGross) &&
        Objects.equals(this.totalGrossLocal, spending.totalGrossLocal) &&
        Objects.equals(this.totalVatAmount, spending.totalVatAmount) &&
        Objects.equals(this.totalVatAmountLocal, spending.totalVatAmountLocal) &&
        Objects.equals(this.invoiceDate, spending.invoiceDate) &&
        Objects.equals(this.dueDate, spending.dueDate) &&
        Objects.equals(this.paymentMethod, spending.paymentMethod) &&
        Objects.equals(this.comment, spending.comment);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, organizationId, category, paidAt, fulfillmentDate, partner, invoiceNumber, currency, conversionRate, totalGross, totalGrossLocal, totalVatAmount, totalVatAmountLocal, invoiceDate, dueDate, paymentMethod, comment);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Spending {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    paidAt: ").append(toIndentedString(paidAt)).append("\n");
    sb.append("    fulfillmentDate: ").append(toIndentedString(fulfillmentDate)).append("\n");
    sb.append("    partner: ").append(toIndentedString(partner)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    conversionRate: ").append(toIndentedString(conversionRate)).append("\n");
    sb.append("    totalGross: ").append(toIndentedString(totalGross)).append("\n");
    sb.append("    totalGrossLocal: ").append(toIndentedString(totalGrossLocal)).append("\n");
    sb.append("    totalVatAmount: ").append(toIndentedString(totalVatAmount)).append("\n");
    sb.append("    totalVatAmountLocal: ").append(toIndentedString(totalVatAmountLocal)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("organization_id");
    openapiFields.add("category");
    openapiFields.add("paid_at");
    openapiFields.add("fulfillment_date");
    openapiFields.add("partner");
    openapiFields.add("invoice_number");
    openapiFields.add("currency");
    openapiFields.add("conversion_rate");
    openapiFields.add("total_gross");
    openapiFields.add("total_gross_local");
    openapiFields.add("total_vat_amount");
    openapiFields.add("total_vat_amount_local");
    openapiFields.add("invoice_date");
    openapiFields.add("due_date");
    openapiFields.add("payment_method");
    openapiFields.add("comment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Spending
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Spending.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Spending is not found in the empty JSON string", Spending.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Spending.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Spending` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `partner`
      if (jsonObj.get("partner") != null && !jsonObj.get("partner").isJsonNull()) {
        SpendingPartner.validateJsonElement(jsonObj.get("partner"));
      }
      if ((jsonObj.get("invoice_number") != null && !jsonObj.get("invoice_number").isJsonNull()) && !jsonObj.get("invoice_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_number").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Spending.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Spending' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Spending> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Spending.class));

       return (TypeAdapter<T>) new TypeAdapter<Spending>() {
           @Override
           public void write(JsonWriter out, Spending value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Spending read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Spending given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Spending
  * @throws IOException if the JSON string is invalid with respect to Spending
  */
  public static Spending fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Spending.class);
  }

 /**
  * Convert an instance of Spending to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


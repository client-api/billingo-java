/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.clientapi.billingo.api;

import com.clientapi.billingo.invoker.ApiException;
import java.math.BigDecimal;
import com.clientapi.billingo.model.ClientError;
import com.clientapi.billingo.model.ClientErrorResponse;
import com.clientapi.billingo.model.Document;
import com.clientapi.billingo.model.DocumentCancellation;
import com.clientapi.billingo.model.DocumentInsert;
import com.clientapi.billingo.model.DocumentList;
import com.clientapi.billingo.model.DocumentPublicUrl;
import com.clientapi.billingo.model.DocumentType;
import java.io.File;
import com.clientapi.billingo.model.InvoiceSettings;
import java.time.LocalDate;
import com.clientapi.billingo.model.ModificationDocumentInsert;
import com.clientapi.billingo.model.OnlineSzamlaStatus;
import com.clientapi.billingo.model.PaymentHistory;
import com.clientapi.billingo.model.PaymentMethod;
import com.clientapi.billingo.model.PaymentStatus;
import com.clientapi.billingo.model.ReceiptInsert;
import com.clientapi.billingo.model.SendDocument;
import com.clientapi.billingo.model.ServerErrorResponse;
import com.clientapi.billingo.model.SubscriptionErrorResponse;
import com.clientapi.billingo.model.TooManyRequestsResponse;
import com.clientapi.billingo.model.ValidationErrorResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DocumentApi
 */
@Disabled
public class DocumentApiTest {

    private final DocumentApi api = new DocumentApi();

    /**
     * Archive a proforma document.
     *
     * Archive an existing proforma document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveDocumentTest() throws ApiException {
        Integer id = null;
        api.archiveDocument(id);
        // TODO: test validations
    }

    /**
     * Cancel a document
     *
     * Cancel a document. Returns a cancellation document object if the cancellation is succeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelDocumentTest() throws ApiException {
        Integer id = null;
        DocumentCancellation documentCancellation = null;
        Document response = api.cancelDocument(id, documentCancellation);
        // TODO: test validations
    }

    /**
     * Create a document
     *
     * Create a new document. Returns a document object if the create is succeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentTest() throws ApiException {
        DocumentInsert documentInsert = null;
        Document response = api.createDocument(documentInsert);
        // TODO: test validations
    }

    /**
     * Converts a draft to an invoice.
     *
     * Converts a draft to an invoice. Returns the invoice object if the convert is succeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentFromDraftTest() throws ApiException {
        Integer id = null;
        DocumentInsert documentInsert = null;
        Document response = api.createDocumentFromDraft(id, documentInsert);
        // TODO: test validations
    }

    /**
     * Create a document from proforma.
     *
     * Create a new document from proforma. Returns a document object if the create is succeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDocumentFromProformaTest() throws ApiException {
        Integer id = null;
        InvoiceSettings invoiceSettings = null;
        Document response = api.createDocumentFromProforma(id, invoiceSettings);
        // TODO: test validations
    }

    /**
     * Create a modification document.
     *
     * Create a modification document for the given document. Returns a new document object if the create is successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createModificationDocumentTest() throws ApiException {
        Integer id = null;
        ModificationDocumentInsert modificationDocumentInsert = null;
        Document response = api.createModificationDocument(id, modificationDocumentInsert);
        // TODO: test validations
    }

    /**
     * Create a receipt
     *
     * Create a new receipt. Returns a document object if the create is succeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReceiptTest() throws ApiException {
        ReceiptInsert receiptInsert = null;
        Document response = api.createReceipt(receiptInsert);
        // TODO: test validations
    }

    /**
     * Converts a draft to a receipt.
     *
     * Converts a draft to a receipt. Returns the receipt object if the convert is succeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReceiptFromDraftTest() throws ApiException {
        Integer id = null;
        ReceiptInsert receiptInsert = null;
        Document response = api.createReceiptFromDraft(id, receiptInsert);
        // TODO: test validations
    }

    /**
     * Delete a draft.
     *
     * Delete an existing draft.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDocumentTest() throws ApiException {
        Integer id = null;
        api.deleteDocument(id);
        // TODO: test validations
    }

    /**
     * Delete all payment history on document
     *
     * Delete all exist payment history on document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePaymentTest() throws ApiException {
        Integer id = null;
        List<PaymentHistory> response = api.deletePayment(id);
        // TODO: test validations
    }

    /**
     * Copy a document
     *
     * Copy a document. Returns the new document if the copy was succeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void documentCopyTest() throws ApiException {
        Integer id = null;
        Document response = api.documentCopy(id);
        // TODO: test validations
    }

    /**
     * Download a document in PDF format.
     *
     * Download a document. Returns a document in PDF format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadDocumentTest() throws ApiException {
        Integer id = null;
        File response = api.downloadDocument(id);
        // TODO: test validations
    }

    /**
     * Retrieve a document
     *
     * Retrieves the details of an existing document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentTest() throws ApiException {
        Integer id = null;
        Document response = api.getDocument(id);
        // TODO: test validations
    }

    /**
     * Retrieve a document by vendor id
     *
     * Retrieves the details of an existing document by vendor id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentByVendorIdTest() throws ApiException {
        String vendorId = null;
        Document response = api.getDocumentByVendorId(vendorId);
        // TODO: test validations
    }

    /**
     * Retrieve a document Online Sz√°mla status
     *
     * Retrieves the details of an existing document status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOnlineSzamlaStatusTest() throws ApiException {
        Integer id = null;
        OnlineSzamlaStatus response = api.getOnlineSzamlaStatus(id);
        // TODO: test validations
    }

    /**
     * Retrieve a payment histroy
     *
     * Retrieves the details of payment history an existing document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentTest() throws ApiException {
        Integer id = null;
        List<PaymentHistory> response = api.getPayment(id);
        // TODO: test validations
    }

    /**
     * Retrieve a document download public url.
     *
     * Retrieves public url to download an existing document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPublicUrlTest() throws ApiException {
        Integer id = null;
        DocumentPublicUrl response = api.getPublicUrl(id);
        // TODO: test validations
    }

    /**
     * List all documents
     *
     * Returns a list of your documents. The documents are returned sorted by creation date, with the most recent documents appearing first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDocumentTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        Integer blockId = null;
        Integer partnerId = null;
        PaymentMethod paymentMethod = null;
        PaymentStatus paymentStatus = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        Integer startNumber = null;
        Integer endNumber = null;
        Integer startYear = null;
        Integer endYear = null;
        DocumentType type = null;
        String query = null;
        LocalDate paidStartDate = null;
        LocalDate paidEndDate = null;
        LocalDate fulfillmentStartDate = null;
        LocalDate fulfillmentEndDate = null;
        String lastModifiedDate = null;
        DocumentList response = api.listDocument(page, perPage, blockId, partnerId, paymentMethod, paymentStatus, startDate, endDate, startNumber, endNumber, startYear, endYear, type, query, paidStartDate, paidEndDate, fulfillmentStartDate, fulfillmentEndDate, lastModifiedDate);
        // TODO: test validations
    }

    /**
     * Returns a printable POS PDF
     *
     * Returns a printable POS PDF file of a particular document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void posPrintTest() throws ApiException {
        Integer id = null;
        BigDecimal size = null;
        File response = api.posPrint(id, size);
        // TODO: test validations
    }

    /**
     * Send invoice to given email adresses.
     *
     * Returns a list of emails, where the invoice is sent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendDocumentTest() throws ApiException {
        Integer id = null;
        SendDocument sendDocument = null;
        SendDocument response = api.sendDocument(id, sendDocument);
        // TODO: test validations
    }

    /**
     * Update payment history
     *
     * Update payment history an existing document. Returns a payment history object if the update is succeded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentTest() throws ApiException {
        Integer id = null;
        List<PaymentHistory> paymentHistory = null;
        List<PaymentHistory> response = api.updatePayment(id, paymentHistory);
        // TODO: test validations
    }

}

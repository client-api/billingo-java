/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.clientapi.billingo.api;

import com.clientapi.billingo.invoker.ApiException;
import com.clientapi.billingo.model.Category;
import com.clientapi.billingo.model.ClientErrorResponse;
import com.clientapi.billingo.model.Currency;
import com.clientapi.billingo.model.DateType;
import com.clientapi.billingo.model.PaymentMethod;
import com.clientapi.billingo.model.PaymentStatusSpending;
import com.clientapi.billingo.model.ServerErrorResponse;
import com.clientapi.billingo.model.Source;
import com.clientapi.billingo.model.Spending;
import com.clientapi.billingo.model.SpendingList;
import com.clientapi.billingo.model.SpendingSave;
import com.clientapi.billingo.model.SubscriptionErrorResponse;
import com.clientapi.billingo.model.TooManyRequestsResponse;
import com.clientapi.billingo.model.ValidationErrorResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SpendingApi
 */
@Disabled
public class SpendingApiTest {

    private final SpendingApi api = new SpendingApi();

    /**
     * Deletes a spending.
     *
     * Deletes the spending identified by the ID given in path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void spendingDeleteTest() throws ApiException {
        Integer id = null;
        api.spendingDelete(id);
        // TODO: test validations
    }

    /**
     * Lists all spending
     *
     * Returns a list of your spending items, ordered by the due date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void spendingListTest() throws ApiException {
        String q = null;
        Integer page = null;
        Integer perPage = null;
        DateType spendingDate = null;
        String startDate = null;
        String endDate = null;
        PaymentStatusSpending paymentStatus = null;
        Source spendingType = null;
        Category categories = null;
        Currency currencies = null;
        PaymentMethod paymentMethods = null;
        SpendingList response = api.spendingList(q, page, perPage, spendingDate, startDate, endDate, paymentStatus, spendingType, categories, currencies, paymentMethods);
        // TODO: test validations
    }

    /**
     * Creates a new spending.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void spendingSaveTest() throws ApiException {
        SpendingSave spendingSave = null;
        Spending response = api.spendingSave(spendingSave);
        // TODO: test validations
    }

    /**
     * Retrieves one specific spending.
     *
     * Retrives the spending identified by the given ID in path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void spendingShowTest() throws ApiException {
        Integer id = null;
        Spending response = api.spendingShow(id);
        // TODO: test validations
    }

    /**
     * Updates a spending item.
     *
     * Updates the spending item identified by the ID given in path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void spendingUpdateTest() throws ApiException {
        Integer id = null;
        SpendingSave spendingSave = null;
        Spending response = api.spendingUpdate(id, spendingSave);
        // TODO: test validations
    }

}

/*
 * Billingo API v3
 * This is a Billingo API v3 documentation. Our API based on REST software architectural style. API has resource-oriented URLs, accepts JSON-encoded request bodies and returns JSON-encoded responses. To use this API you have to generate a new API key on our [site](https://app.billingo.hu/api-key). After that, you can test your API key on this page.
 *
 * The version of the OpenAPI document: 3.0.14
 * Contact: hello@billingo.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.clientapi.billingo.model;

import com.clientapi.billingo.model.Category;
import com.clientapi.billingo.model.Currency;
import com.clientapi.billingo.model.SpendingPartner;
import com.clientapi.billingo.model.SpendingPaymentMethod;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Spending
 */
public class SpendingTest {
    private final Spending model = new Spending();

    /**
     * Model tests for Spending
     */
    @Test
    public void testSpending() {
        // TODO: test Spending
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'organizationId'
     */
    @Test
    public void organizationIdTest() {
        // TODO: test organizationId
    }

    /**
     * Test the property 'category'
     */
    @Test
    public void categoryTest() {
        // TODO: test category
    }

    /**
     * Test the property 'paidAt'
     */
    @Test
    public void paidAtTest() {
        // TODO: test paidAt
    }

    /**
     * Test the property 'fulfillmentDate'
     */
    @Test
    public void fulfillmentDateTest() {
        // TODO: test fulfillmentDate
    }

    /**
     * Test the property 'partner'
     */
    @Test
    public void partnerTest() {
        // TODO: test partner
    }

    /**
     * Test the property 'invoiceNumber'
     */
    @Test
    public void invoiceNumberTest() {
        // TODO: test invoiceNumber
    }

    /**
     * Test the property 'currency'
     */
    @Test
    public void currencyTest() {
        // TODO: test currency
    }

    /**
     * Test the property 'conversionRate'
     */
    @Test
    public void conversionRateTest() {
        // TODO: test conversionRate
    }

    /**
     * Test the property 'totalGross'
     */
    @Test
    public void totalGrossTest() {
        // TODO: test totalGross
    }

    /**
     * Test the property 'totalGrossLocal'
     */
    @Test
    public void totalGrossLocalTest() {
        // TODO: test totalGrossLocal
    }

    /**
     * Test the property 'totalVatAmount'
     */
    @Test
    public void totalVatAmountTest() {
        // TODO: test totalVatAmount
    }

    /**
     * Test the property 'totalVatAmountLocal'
     */
    @Test
    public void totalVatAmountLocalTest() {
        // TODO: test totalVatAmountLocal
    }

    /**
     * Test the property 'invoiceDate'
     */
    @Test
    public void invoiceDateTest() {
        // TODO: test invoiceDate
    }

    /**
     * Test the property 'dueDate'
     */
    @Test
    public void dueDateTest() {
        // TODO: test dueDate
    }

    /**
     * Test the property 'paymentMethod'
     */
    @Test
    public void paymentMethodTest() {
        // TODO: test paymentMethod
    }

    /**
     * Test the property 'comment'
     */
    @Test
    public void commentTest() {
        // TODO: test comment
    }

}
